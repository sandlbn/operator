apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

nameSuffix: -tdx

resources:
- ../base

images:
- name: quay.io/confidential-containers/reqs-payload
  newTag: latest
- name: quay.io/kata-containers/kata-deploy
  newName: quay.io/kata-containers/kata-deploy-ci
  newTag: kata-containers-latest

patches:
- patch: |-
    - op: replace
      path: /spec/config/runtimeClasses
      value:
      - name: "kata-qemu-tdx"
        snapshotter: ""
        pulltype: ""
      - name: "kata-qemu"
        snapshotter: ""
        pulltype: ""
    - op: add
      path: /spec/config/debug
      value: true
    - op: add
      path: /spec/config/environmentVariables
      value:
        - name: "INSTALL_OFFICIAL_CONTAINERD"
          value: "false"
        - name: "INSTALL_COCO_CONTAINERD"
          value: "false"
        - name: "INSTALL_VFIO_GPU_CONTAINERD"
          value: "false"
        - name: "INSTALL_NYDUS_SNAPSHOTTER"
          value: "false"
        - name: "CONFIGURE_CC"
          value: "yes"
        - name: "DEBUG"
          value: "true"
    - op: replace
      path: /spec/config/installCmd
      value: 
      - /bin/bash
      - -c
      - |
        set -e
        echo "Installing Kata for RKE2/K3s with TDX support..."
        
        # Debug: Show what's available
        echo "Contents of /opt/kata-artifacts:"
        ls -la /opt/kata-artifacts/ || true
        echo "Contents of /opt/kata-artifacts/opt:"
        ls -la /opt/kata-artifacts/opt/ || true
        echo "Contents of /opt/kata-artifacts/opt/kata:"
        ls -la /opt/kata-artifacts/opt/kata/ || true
        
        # Detect containerd config location
        if [ -d "/var/lib/rancher/rke2" ]; then
          CONFIG_PATH="/var/lib/rancher/rke2/agent/etc/containerd"
          CONFIG_FILE="$CONFIG_PATH/config.toml.tmpl"
          echo "Detected RKE2"
        elif [ -d "/var/lib/rancher/k3s" ]; then
          CONFIG_PATH="/var/lib/rancher/k3s/agent/etc/containerd"
          CONFIG_FILE="$CONFIG_PATH/config.toml.tmpl"
          echo "Detected K3s"
        else
          CONFIG_PATH="/etc/containerd"
          CONFIG_FILE="$CONFIG_PATH/config.toml"
          echo "Using standard containerd path"
        fi
        
        # Install kata binaries - FIX: correct source path
        echo "Installing kata binaries..."
        if [ -d "/opt/kata-artifacts/opt/kata" ]; then
          echo "Found kata at /opt/kata-artifacts/opt/kata"
          cp -a /opt/kata-artifacts/opt/kata /opt/
        elif [ -d "/opt/kata" ]; then
          echo "Kata already installed at /opt/kata"
        else
          echo "ERROR: Cannot find kata files!"
          find /opt/kata-artifacts -type d -name kata 2>/dev/null || true
          exit 1
        fi
        
        # Ensure permissions
        chmod +x /opt/kata/bin/* || true
        
        # Create symlinks
        mkdir -p /usr/local/bin
        ln -sf /opt/kata/bin/kata-runtime /usr/local/bin/kata-runtime
        ln -sf /opt/kata/bin/containerd-shim-kata-v2 /usr/local/bin/containerd-shim-kata-v2
        ln -sf /opt/kata/bin/kata-collect-data.sh /usr/local/bin/kata-collect-data.sh
        
        # Create kata configuration directory
        mkdir -p /etc/kata-containers/
        ln -sf /opt/kata/share/defaults/kata-containers/configuration.toml /etc/kata-containers/configuration.toml
        
        # Create TDX-specific configuration
        echo "Creating TDX configuration..."
        TDX_CONFIG="/opt/kata/share/defaults/kata-containers/configuration-qemu-tdx.toml"
        if [ ! -f "$TDX_CONFIG" ]; then
          # First check if base configuration exists
          if [ -f "/opt/kata/share/defaults/kata-containers/configuration-qemu.toml" ]; then
            cp /opt/kata/share/defaults/kata-containers/configuration-qemu.toml "$TDX_CONFIG"
          elif [ -f "/opt/kata/share/defaults/kata-containers/configuration.toml" ]; then
            cp /opt/kata/share/defaults/kata-containers/configuration.toml "$TDX_CONFIG"
          else
            echo "WARNING: No base configuration found"
          fi
          
          # Add TDX-specific settings
          cat >> "$TDX_CONFIG" << 'EOFTDX'

        # TDX Configuration
        [hypervisor.qemu]
        confidential_guest = true
        tdx = true
        kernel_params = " tdx_guest=on"

        [hypervisor.qemu.tdx]
        # TDX specific settings will be here

        EOFTDX
        fi
        
        # Update containerd config
        echo "Updating containerd configuration..."
        mkdir -p "$CONFIG_PATH"
        
        # Check if config file exists
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "Creating new containerd config at $CONFIG_FILE"
          cat > "$CONFIG_FILE" << 'EOFBASE'
        version = 2
        [plugins]
          [plugins."io.containerd.grpc.v1.cri"]
            [plugins."io.containerd.grpc.v1.cri".containerd]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
        EOFBASE
        fi
        
        # Check if kata is already configured
        if ! grep -q "io.containerd.kata.v2" "$CONFIG_FILE"; then
          echo "Adding kata runtime configuration to containerd..."
          cat >> "$CONFIG_FILE" << 'EOFCONFIG'

        # Kata Containers Runtime
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]
          runtime_type = "io.containerd.kata.v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          container_annotations = ["io.katacontainers.*"]
          
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]
          ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration.toml"

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu]
          runtime_type = "io.containerd.kata.v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          container_annotations = ["io.katacontainers.*"]
          
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu.options]
          ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-qemu.toml"

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu-tdx]
          runtime_type = "io.containerd.kata.v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          container_annotations = ["io.katacontainers.*"]
          
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu-tdx.options]
          ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-qemu-tdx.toml"
        EOFCONFIG
        fi
        
        echo "Kata installation completed!"
        echo "Configuration file updated at: $CONFIG_FILE"
        
        # Verify installation
        echo "Verifying installation..."
        ls -la /opt/kata/bin/kata-runtime || echo "WARNING: kata-runtime not found"
        ls -la /usr/local/bin/kata-runtime || echo "WARNING: kata-runtime symlink not created"
        
        echo "Please restart your RKE2/K3s service:"
        echo "  For RKE2: sudo systemctl restart rke2-agent"
        echo "  For K3s: sudo systemctl restart k3s-agent"
        
        # Create a marker file
        touch /opt/kata/.installed
    - op: replace
      path: /spec/config/uninstallCmd
      value:
      - /bin/bash
      - -c
      - |
        echo "Uninstalling Kata..."
        rm -rf /opt/kata
        rm -f /usr/local/bin/kata-runtime
        rm -f /usr/local/bin/containerd-shim-kata-v2
        rm -f /usr/local/bin/kata-collect-data.sh
        rm -rf /etc/kata-containers
        
        # Remove kata configurations from containerd
        for config in /var/lib/rancher/rke2/agent/etc/containerd/config.toml.tmpl /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl /etc/containerd/config.toml; do
          if [ -f "$config" ]; then
            echo "Removing kata configuration from $config"
            sed -i '/# Kata Containers Runtime/,/\[plugins\."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu-tdx.options\]/d' "$config"
            sed -i '/ConfigPath.*kata-containers/d' "$config"
          fi
        done
        
        echo "Kata uninstalled"
    - op: replace
      path: /spec/config/installerVolumes
      value:
        - hostPath:
            path: /opt/kata-artifacts/
            type: DirectoryOrCreate
          name: kata-artifacts
        - hostPath:
            path: /var/lib/rancher/rke2/agent/etc/containerd/
            type: DirectoryOrCreate
          name: rke2-containerd-conf
        - hostPath:
            path: /var/lib/rancher/k3s/agent/etc/containerd/
            type: DirectoryOrCreate
          name: k3s-containerd-conf
        - hostPath:
            path: /etc/containerd/
            type: DirectoryOrCreate
          name: containerd-conf
        - hostPath:
            path: /usr/local/bin/
            type: DirectoryOrCreate
          name: local-bin
        - hostPath:
            path: /opt/kata/
            type: DirectoryOrCreate
          name: kata-install
        - hostPath:
            path: /etc/kata-containers/
            type: DirectoryOrCreate
          name: kata-config
    - op: replace
      path: /spec/config/installerVolumeMounts
      value:
        - mountPath: /opt/kata-artifacts/
          name: kata-artifacts
          readOnly: true
        - mountPath: /var/lib/rancher/rke2/agent/etc/containerd/
          name: rke2-containerd-conf
        - mountPath: /var/lib/rancher/k3s/agent/etc/containerd/
          name: k3s-containerd-conf
        - mountPath: /etc/containerd/
          name: containerd-conf
        - mountPath: /usr/local/bin/
          name: local-bin
        - mountPath: /opt/kata/
          name: kata-install
        - mountPath: /etc/kata-containers/
          name: kata-config
    - op: add
      path: /spec/ccNodeSelector
      value:
        matchLabels:
          # Deploy only on TDX-capable nodes if labeled
          # Remove or modify this if you want to deploy on all nodes
          node-role.kubernetes.io/worker: "true"
  target:
    kind: CcRuntime