apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

nameSuffix: -tdx

resources:
- ../base

images:
- name: quay.io/confidential-containers/reqs-payload
  newTag: latest
- name: quay.io/kata-containers/kata-deploy
  newName: quay.io/kata-containers/kata-deploy-ci
  newTag: kata-containers-latest

patches:
# Patch to completely replace the pre-install daemon behavior
- patch: |-
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: cc-operator-pre-install-daemon
      namespace: confidential-containers-system
    spec:
      template:
        spec:
          containers:
          - name: cc-operator-pre-install-daemon
            env:
            - name: "NODE_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              set -e
              
              echo "RKE2/K3s compatible pre-install daemon"
              echo "This daemon will not install any artifacts or restart containerd"
              
              # Label the node as done without doing anything
              kubectl label node "${NODE_NAME}" confidentialcontainers.org/preinstall=done --overwrite
              
              echo "Node labeled, sleeping indefinitely"
              sleep infinity
  target:
    kind: DaemonSet
    name: cc-operator-pre-install-daemon
    namespace: confidential-containers-system

# Configure the CcRuntime
- patch: |-
    - op: replace
      path: /spec/config/runtimeClasses
      value:
      - name: "kata-qemu-tdx"
        snapshotter: ""
        pulltype: ""
      - name: "kata-qemu"
        snapshotter: ""
        pulltype: ""
    - op: add
      path: /spec/config/debug
      value: true
    - op: add
      path: /spec/config/environmentVariables
      value:
        - name: "INSTALL_OFFICIAL_CONTAINERD"
          value: "false"
        - name: "INSTALL_COCO_CONTAINERD"
          value: "false"
        - name: "INSTALL_VFIO_GPU_CONTAINERD"
          value: "false"
        - name: "INSTALL_NYDUS_SNAPSHOTTER"
          value: "false"
        - name: "CONFIGURE_CC"
          value: "yes"
        - name: "DEBUG"
          value: "true"
    - op: replace
      path: /spec/config/installCmd
      value: 
      - /bin/bash
      - -c
      - |
        set -ex
        echo "Installing Kata for RKE2/K3s with TDX support..."
        
        # Debug: Show what's available in kata-artifacts
        echo "=== Checking kata artifacts location ==="
        echo "Contents of /opt/kata-artifacts:"
        ls -la /opt/kata-artifacts/ || true
        echo "Contents of /opt/kata-artifacts/opt:"
        ls -la /opt/kata-artifacts/opt/ || true
        echo "Contents of /opt/kata-artifacts/opt/kata:"
        ls -la /opt/kata-artifacts/opt/kata/ || true
        
        # Verify kata files are where we expect them
        if [ -d "/opt/kata-artifacts/opt/kata/bin" ]; then
          echo "Found kata bin directory"
          ls -la /opt/kata-artifacts/opt/kata/bin/ | head -10
        fi
        
        # Detect containerd config location
        if [ -d "/var/lib/rancher/rke2" ]; then
          CONFIG_PATH="/var/lib/rancher/rke2/agent/etc/containerd"
          CONFIG_FILE="$CONFIG_PATH/config.toml.tmpl"
          RUNTIME_TYPE="rke2"
          echo "Detected RKE2"
        elif [ -d "/var/lib/rancher/k3s" ]; then
          CONFIG_PATH="/var/lib/rancher/k3s/agent/etc/containerd"
          CONFIG_FILE="$CONFIG_PATH/config.toml.tmpl"
          RUNTIME_TYPE="k3s"
          echo "Detected K3s"
        else
          CONFIG_PATH="/etc/containerd"
          CONFIG_FILE="$CONFIG_PATH/config.toml"
          RUNTIME_TYPE="standard"
          echo "Using standard containerd path"
        fi
        
        # Install kata binaries from the correct location
        echo "=== Installing kata binaries ==="
        if [ -d "/opt/kata-artifacts/opt/kata" ]; then
          echo "Found kata at /opt/kata-artifacts/opt/kata"
          echo "Creating /opt directory if it doesn't exist"
          mkdir -p /opt
          echo "Copying kata files to /opt/kata"
          cp -a /opt/kata-artifacts/opt/kata /opt/
          echo "Copy completed"
        else
          echo "ERROR: Cannot find kata files at /opt/kata-artifacts/opt/kata"
          echo "Searching for kata files..."
          find /opt/kata-artifacts -type d -name "kata" 2>/dev/null
          exit 1
        fi
        
        # Verify the copy was successful
        if [ ! -d "/opt/kata" ]; then
          echo "ERROR: Failed to copy kata to /opt/kata"
          exit 1
        fi
        
        echo "Kata directory contents:"
        ls -la /opt/kata/
        
        # Ensure permissions
        echo "Setting executable permissions on kata binaries"
        chmod +x /opt/kata/bin/* || true
        
        # Create symlinks
        echo "=== Creating symlinks ==="
        mkdir -p /usr/local/bin
        ln -sf /opt/kata/bin/kata-runtime /usr/local/bin/kata-runtime
        ln -sf /opt/kata/bin/containerd-shim-kata-v2 /usr/local/bin/containerd-shim-kata-v2
        if [ -f "/opt/kata/bin/kata-collect-data.sh" ]; then
          ln -sf /opt/kata/bin/kata-collect-data.sh /usr/local/bin/kata-collect-data.sh
        fi
        
        # Verify binaries are executable
        echo "=== Verifying kata installation ==="
        if [ -f "/opt/kata/bin/kata-runtime" ]; then
          echo "Testing kata-runtime binary:"
          /opt/kata/bin/kata-runtime --version || echo "WARNING: kata-runtime not working properly"
        else
          echo "ERROR: kata-runtime not found at /opt/kata/bin/kata-runtime"
          exit 1
        fi
        
        # Create kata configuration directory
        echo "=== Setting up kata configuration ==="
        mkdir -p /etc/kata-containers/
        
        # Find and link the configuration
        CONFIG_DIR="/opt/kata/share/defaults/kata-containers"
        if [ -d "$CONFIG_DIR" ]; then
          echo "Found kata config directory at $CONFIG_DIR"
          ls -la "$CONFIG_DIR/" || true
          
          # Link the main configuration
          if [ -f "$CONFIG_DIR/configuration.toml" ]; then
            ln -sf "$CONFIG_DIR/configuration.toml" /etc/kata-containers/configuration.toml
            echo "Linked main configuration"
          else
            echo "WARNING: configuration.toml not found"
          fi
        else
          echo "WARNING: kata config directory not found at $CONFIG_DIR"
          echo "Searching for configuration files:"
          find /opt/kata -name "configuration*.toml" -type f 2>/dev/null
        fi
        
        # Create TDX-specific configuration
        echo "=== Creating TDX configuration ==="
        TDX_CONFIG="$CONFIG_DIR/configuration-qemu-tdx.toml"
        QEMU_CONFIG="$CONFIG_DIR/configuration-qemu.toml"
        BASE_CONFIG="$CONFIG_DIR/configuration.toml"
        
        # Ensure the config directory exists
        mkdir -p "$CONFIG_DIR"
        
        # Find a base configuration to copy for TDX
        if [ -f "$QEMU_CONFIG" ]; then
          echo "Using qemu configuration as base for TDX"
          cp "$QEMU_CONFIG" "$TDX_CONFIG"
        elif [ -f "$BASE_CONFIG" ]; then
          echo "Using base configuration for TDX"
          cp "$BASE_CONFIG" "$TDX_CONFIG"
        else
          echo "WARNING: No base configuration found, creating minimal TDX config"
          cat > "$TDX_CONFIG" << 'EOFMINIMAL'
        # Kata TDX Configuration
        [hypervisor.qemu]
        path = "/opt/kata/bin/qemu-system-x86_64"
        kernel = "/opt/kata/share/kata-containers/vmlinuz.container"
        image = "/opt/kata/share/kata-containers/kata-containers.img"
        machine_type = "q35"
        confidential_guest = true
        tdx = true
        kernel_params = "console=hvc0 console=hvc1 agent.use_vsock=true tdx_guest=on"
        default_vcpus = 1
        default_memory = 2048
        
        [agent.kata]
        enable_debug = true
        
        [runtime]
        enable_debug = true
        EOFMINIMAL
        fi
        
        # Add/Update TDX-specific settings
        echo "=== Configuring TDX settings ==="
        # Check if TDX settings already exist
        if ! grep -q "tdx = true" "$TDX_CONFIG" 2>/dev/null; then
          echo "Adding TDX configuration sections"
          cat >> "$TDX_CONFIG" << 'EOFTDX'

        # TDX Configuration Override
        [hypervisor.qemu]
        confidential_guest = true
        tdx = true
        
        [hypervisor.qemu.tdx]
        EOFTDX
        fi
        
        # Also update kernel params for TDX if not already present
        if ! grep -q "tdx_guest=on" "$TDX_CONFIG" 2>/dev/null; then
          sed -i '/kernel_params = /s/"$/ tdx_guest=on"/' "$TDX_CONFIG" 2>/dev/null || true
        fi
        
        # Update containerd config
        echo "=== Updating containerd configuration ==="
        mkdir -p "$CONFIG_PATH"
        
        # Check if kata is already configured
        if [ -f "$CONFIG_FILE" ] && ! grep -q "kata-qemu-tdx" "$CONFIG_FILE"; then
          echo "Adding kata runtime configurations to $CONFIG_FILE"
          
          # Add kata runtimes configuration
          cat >> "$CONFIG_FILE" << 'EOFKATA'

        # Kata Containers Runtimes
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]
          runtime_type = "io.containerd.kata.v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          container_annotations = ["io.katacontainers.*"]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]
            ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration.toml"

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu]
          runtime_type = "io.containerd.kata.v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          container_annotations = ["io.katacontainers.*"]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu.options]
            ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-qemu.toml"

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu-tdx]
          runtime_type = "io.containerd.kata.v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          container_annotations = ["io.katacontainers.*"]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu-tdx.options]
            ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-qemu-tdx.toml"
        EOFKATA
          echo "Kata runtime configurations added"
        else
          echo "Kata runtimes already configured in containerd"
        fi
        
        echo "=== Installation Summary ==="
        echo "Kata binaries installed at: /opt/kata"
        echo "Configuration updated at: $CONFIG_FILE"
        echo "Runtime type: $RUNTIME_TYPE"
        echo "TDX configuration created at: $TDX_CONFIG"
        
        # Final verification
        echo "=== Final verification ==="
        echo "Checking kata-runtime:"
        ls -la /opt/kata/bin/kata-runtime && /opt/kata/bin/kata-runtime --version
        echo "Checking symlink:"
        ls -la /usr/local/bin/kata-runtime
        echo "Checking TDX config:"
        ls -la "$TDX_CONFIG" || echo "WARNING: TDX config not found"
        echo "Checking main config:"
        ls -la /etc/kata-containers/configuration.toml || echo "WARNING: Main config link not found"
        
        # DO NOT restart containerd - let the user do it manually
        echo ""
        echo "============================================"
        echo "=== IMPORTANT: Manual restart required ==="
        echo "============================================"
        echo "Kata installation completed successfully!"
        echo ""
        echo "You MUST manually restart your container runtime:"
        echo "  For RKE2 server: sudo systemctl restart rke2-server"
        echo "  For RKE2 agent: sudo systemctl restart rke2-agent"
        echo "  For K3s: sudo systemctl restart k3s or k3s-agent"
        echo "  For standard containerd: sudo systemctl restart containerd"
        echo "============================================"
        echo ""
        
        # Create marker file
        touch /opt/kata/.installed
        echo "Installation completed at $(date)" > /opt/kata/.installed
        echo "Kata version: $(/opt/kata/bin/kata-runtime --version)" >> /opt/kata/.installed
    - op: replace
      path: /spec/config/uninstallCmd
      value:
      - /bin/bash
      - -c
      - |
        echo "Uninstalling Kata..."
        rm -rf /opt/kata
        rm -f /usr/local/bin/kata-runtime
        rm -f /usr/local/bin/containerd-shim-kata-v2
        rm -f /usr/local/bin/kata-collect-data.sh
        rm -rf /etc/kata-containers
        rm -f /opt/kata/.installed
        echo "Kata uninstalled - containerd config NOT modified"
        echo "To remove kata from containerd config, manually edit the configuration file"
    - op: replace
      path: /spec/config/installerVolumes
      value:
        - hostPath:
            path: /opt/kata-artifacts/
            type: DirectoryOrCreate
          name: kata-artifacts
        - hostPath:
            path: /var/lib/rancher/rke2/agent/etc/containerd/
            type: DirectoryOrCreate
          name: rke2-containerd-conf
        - hostPath:
            path: /var/lib/rancher/k3s/agent/etc/containerd/
            type: DirectoryOrCreate
          name: k3s-containerd-conf
        - hostPath:
            path: /etc/containerd/
            type: DirectoryOrCreate
          name: containerd-conf
        - hostPath:
            path: /usr/local/bin/
            type: DirectoryOrCreate
          name: local-bin
        - hostPath:
            path: /opt/
            type: DirectoryOrCreate
          name: opt-dir
        - hostPath:
            path: /etc/kata-containers/
            type: DirectoryOrCreate
          name: kata-config-dir
    - op: replace
      path: /spec/config/installerVolumeMounts
      value:
        - mountPath: /opt/kata-artifacts/
          name: kata-artifacts
        - mountPath: /var/lib/rancher/rke2/agent/etc/containerd/
          name: rke2-containerd-conf
        - mountPath: /var/lib/rancher/k3s/agent/etc/containerd/
          name: k3s-containerd-conf
        - mountPath: /etc/containerd/
          name: containerd-conf
        - mountPath: /usr/local/bin/
          name: local-bin
        - mountPath: /opt/
          name: opt-dir
        - mountPath: /etc/kata-containers/
          name: kata-config-dir
    - op: add
      path: /spec/ccNodeSelector
      value:
        matchLabels:
          node-role.kubernetes.io/worker: "true"
  target:
    kind: CcRuntime
    name: ccruntime