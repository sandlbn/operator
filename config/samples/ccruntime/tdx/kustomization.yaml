apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

nameSuffix: -tdx

resources:
- ../base

images:
- name: quay.io/confidential-containers/reqs-payload
  newTag: latest
- name: quay.io/kata-containers/kata-deploy
  newName: quay.io/kata-containers/kata-deploy-ci
  newTag: kata-containers-latest

patches:
# First patch - disable the pre-install daemon by scaling to 0
- patch: |-
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: cc-operator-pre-install-daemon
      namespace: confidential-containers-system
    spec:
      template:
        spec:
          containers:
          - name: cc-operator-pre-install-daemon
            env:
            - name: "INSTALL_OFFICIAL_CONTAINERD"
              value: "false"
            - name: "INSTALL_COCO_CONTAINERD"
              value: "false"
            - name: "INSTALL_VFIO_GPU_CONTAINERD"
              value: "false"
            - name: "INSTALL_NYDUS_SNAPSHOTTER"
              value: "false"
            command:
            - /bin/sh
            - -c
            - |
              echo "Pre-install daemon disabled for RKE2/K3s compatibility"
              echo "Skipping containerd installation/restart"
              sleep infinity
  target:
    kind: DaemonSet
    name: cc-operator-pre-install-daemon
    namespace: confidential-containers-system

# Second patch - configure the CcRuntime
- patch: |-
    - op: replace
      path: /spec/config/runtimeClasses
      value:
      - name: "kata-qemu-tdx"
        snapshotter: ""
        pulltype: ""
      - name: "kata-qemu"
        snapshotter: ""
        pulltype: ""
    - op: add
      path: /spec/config/debug
      value: true
    - op: add
      path: /spec/config/environmentVariables
      value:
        - name: "INSTALL_OFFICIAL_CONTAINERD"
          value: "false"
        - name: "INSTALL_COCO_CONTAINERD"
          value: "false"
        - name: "INSTALL_VFIO_GPU_CONTAINERD"
          value: "false"
        - name: "INSTALL_NYDUS_SNAPSHOTTER"
          value: "false"
        - name: "CONFIGURE_CC"
          value: "yes"
        - name: "DEBUG"
          value: "true"
    - op: replace
      path: /spec/config/installCmd
      value: 
      - /bin/bash
      - -c
      - |
        set -ex
        echo "Installing Kata for RKE2/K3s with TDX support..."
        
        # Debug: Show what's available
        echo "=== Checking kata artifacts location ==="
        find /opt/kata-artifacts -type f -name "kata-runtime" 2>/dev/null || echo "kata-runtime not found in artifacts"
        
        # Detect containerd config location
        if [ -d "/var/lib/rancher/rke2" ]; then
          CONFIG_PATH="/var/lib/rancher/rke2/agent/etc/containerd"
          CONFIG_FILE="$CONFIG_PATH/config.toml.tmpl"
          RUNTIME_TYPE="rke2"
          echo "Detected RKE2"
        elif [ -d "/var/lib/rancher/k3s" ]; then
          CONFIG_PATH="/var/lib/rancher/k3s/agent/etc/containerd"
          CONFIG_FILE="$CONFIG_PATH/config.toml.tmpl"
          RUNTIME_TYPE="k3s"
          echo "Detected K3s"
        else
          CONFIG_PATH="/etc/containerd"
          CONFIG_FILE="$CONFIG_PATH/config.toml"
          RUNTIME_TYPE="standard"
          echo "Using standard containerd path"
        fi
        
        # Install kata binaries
        echo "=== Installing kata binaries ==="
        if [ -d "/opt/kata-artifacts/opt/kata" ]; then
          echo "Found kata at /opt/kata-artifacts/opt/kata"
          mkdir -p /opt
          cp -a /opt/kata-artifacts/opt/kata /opt/
        else
          echo "ERROR: Cannot find kata files at expected location!"
          echo "Contents of /opt/kata-artifacts:"
          ls -la /opt/kata-artifacts/
          exit 1
        fi
        
        # Ensure permissions
        chmod +x /opt/kata/bin/* || true
        
        # Create symlinks
        echo "=== Creating symlinks ==="
        mkdir -p /usr/local/bin
        ln -sf /opt/kata/bin/kata-runtime /usr/local/bin/kata-runtime
        ln -sf /opt/kata/bin/containerd-shim-kata-v2 /usr/local/bin/containerd-shim-kata-v2
        ln -sf /opt/kata/bin/kata-collect-data.sh /usr/local/bin/kata-collect-data.sh
        
        # Verify binaries are executable
        /opt/kata/bin/kata-runtime --version || echo "WARNING: kata-runtime not executable"
        
        # Create kata configuration directory
        echo "=== Setting up kata configuration ==="
        mkdir -p /etc/kata-containers/
        
        # Find and link the configuration
        CONFIG_SOURCE="/opt/kata/share/defaults/kata-containers/configuration.toml"
        if [ -f "$CONFIG_SOURCE" ]; then
          ln -sf "$CONFIG_SOURCE" /etc/kata-containers/configuration.toml
        else
          echo "WARNING: Default configuration not found at $CONFIG_SOURCE"
          find /opt/kata -name "configuration*.toml" -type f
        fi
        
        # Create TDX-specific configuration
        echo "=== Creating TDX configuration ==="
        TDX_CONFIG="/opt/kata/share/defaults/kata-containers/configuration-qemu-tdx.toml"
        QEMU_CONFIG="/opt/kata/share/defaults/kata-containers/configuration-qemu.toml"
        
        if [ -f "$QEMU_CONFIG" ]; then
          cp "$QEMU_CONFIG" "$TDX_CONFIG"
        elif [ -f "$CONFIG_SOURCE" ]; then
          cp "$CONFIG_SOURCE" "$TDX_CONFIG"
        else
          echo "ERROR: No base configuration found to create TDX config!"
          exit 1
        fi
        
        # Add TDX-specific settings using sed
        echo "=== Adding TDX settings to configuration ==="
        cat >> "$TDX_CONFIG" << 'EOFTDX'

        # TDX Configuration Section
        [hypervisor.qemu]
        confidential_guest = true
        tdx = true
        kernel_params = " tdx_guest=on"

        [hypervisor.qemu.tdx]
        firmware = ""
        EOFTDX
        
        # Update containerd config
        echo "=== Updating containerd configuration ==="
        mkdir -p "$CONFIG_PATH"
        
        # For RKE2/K3s, we need to ensure the base structure exists
        if [ "$RUNTIME_TYPE" != "standard" ] && [ ! -f "$CONFIG_FILE" ]; then
          echo "Creating base containerd config for $RUNTIME_TYPE"
          cat > "$CONFIG_FILE" << 'EOFBASE'
        version = 2
        [plugins]
          [plugins."io.containerd.grpc.v1.cri"]
            [plugins."io.containerd.grpc.v1.cri".containerd]
              default_runtime_name = "runc"
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                  runtime_type = "io.containerd.runc.v2"
        EOFBASE
        fi
        
        # Add kata runtimes if not already present
        if [ -f "$CONFIG_FILE" ] && ! grep -q "kata-qemu-tdx" "$CONFIG_FILE"; then
          echo "Adding kata runtime configurations..."
          
          # Create a temporary file with our additions
          cat >> "$CONFIG_FILE" << 'EOFKATA'

        # Kata Containers Runtimes
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]
          runtime_type = "io.containerd.kata.v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          container_annotations = ["io.katacontainers.*"]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]
            ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration.toml"

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu]
          runtime_type = "io.containerd.kata.v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          container_annotations = ["io.katacontainers.*"]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu.options]
            ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-qemu.toml"

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu-tdx]
          runtime_type = "io.containerd.kata.v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          container_annotations = ["io.katacontainers.*"]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu-tdx.options]
            ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-qemu-tdx.toml"
        EOFKATA
        fi
        
        echo "=== Installation Summary ==="
        echo "Kata binaries installed at: /opt/kata"
        echo "Configuration updated at: $CONFIG_FILE"
        echo "Runtime type: $RUNTIME_TYPE"
        
        # Final verification
        echo "=== Verifying installation ==="
        ls -la /opt/kata/bin/kata-runtime
        ls -la /usr/local/bin/kata-runtime
        ls -la "$TDX_CONFIG" || echo "WARNING: TDX config not found"
        
        # DO NOT restart containerd - let the user do it manually
        echo "=== IMPORTANT: Manual restart required ==="
        echo "Kata installation completed successfully!"
        echo "You MUST manually restart your container runtime:"
        echo "  For RKE2: sudo systemctl restart rke2-server (on server) or rke2-agent (on agent)"
        echo "  For K3s: sudo systemctl restart k3s or k3s-agent"
        echo "  For standard containerd: sudo systemctl restart containerd"
        
        # Create marker file
        touch /opt/kata/.installed
        echo "Installation completed at $(date)" > /opt/kata/.installed
    - op: replace
      path: /spec/config/uninstallCmd
      value:
      - /bin/bash
      - -c
      - |
        echo "Uninstalling Kata..."
        rm -rf /opt/kata
        rm -f /usr/local/bin/kata-runtime
        rm -f /usr/local/bin/containerd-shim-kata-v2
        rm -f /usr/local/bin/kata-collect-data.sh
        rm -rf /etc/kata-containers
        rm -f /opt/kata/.installed
        echo "Kata uninstalled - containerd config NOT modified"
        echo "To remove kata from containerd config, manually edit the configuration file"
    - op: replace
      path: /spec/config/installerVolumes
      value:
        - hostPath:
            path: /opt/kata-artifacts/
            type: DirectoryOrCreate
          name: kata-artifacts
        - hostPath:
            path: /var/lib/rancher/rke2/agent/etc/containerd/
            type: DirectoryOrCreate
          name: rke2-containerd-conf
        - hostPath:
            path: /var/lib/rancher/k3s/agent/etc/containerd/
            type: DirectoryOrCreate
          name: k3s-containerd-conf
        - hostPath:
            path: /etc/containerd/
            type: DirectoryOrCreate
          name: containerd-conf
        - hostPath:
            path: /usr/local/bin/
            type: DirectoryOrCreate
          name: local-bin
        - hostPath:
            path: /opt/
            type: DirectoryOrCreate
          name: opt-dir
        - hostPath:
            path: /etc/kata-containers/
            type: DirectoryOrCreate
          name: kata-config-dir
    - op: replace
      path: /spec/config/installerVolumeMounts
      value:
        - mountPath: /opt/kata-artifacts/
          name: kata-artifacts
        - mountPath: /var/lib/rancher/rke2/agent/etc/containerd/
          name: rke2-containerd-conf
        - mountPath: /var/lib/rancher/k3s/agent/etc/containerd/
          name: k3s-containerd-conf
        - mountPath: /etc/containerd/
          name: containerd-conf
        - mountPath: /usr/local/bin/
          name: local-bin
        - mountPath: /opt/
          name: opt-dir
        - mountPath: /etc/kata-containers/
          name: kata-config-dir
    - op: add
      path: /spec/ccNodeSelector
      value:
        matchLabels:
          node-role.kubernetes.io/worker: "true"
  target:
    kind: CcRuntime
    name: ccruntime